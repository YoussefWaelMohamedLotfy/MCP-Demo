@page "/"
@inject IHttpClientFactory HttpClientFactory

<PageTitle>MCP Blazor</PageTitle>

<div class="container-fluid d-flex flex-column vh-100">
	<!-- Chat Header -->
	<div class="row bg-primary text-white py-3">
		<div class="col d-flex justify-content-between align-items-center">
			<h3>MCP Client - Blazor</h3>
			<div>
				<ThemeProvider />
			</div>
		</div>
	</div>

	<!-- Chat Messages -->
	<div class="row flex-grow-1 overflow-auto">
		<div class="col-md-8 mx-auto">
			<div class="chat-box p-3">
				@foreach (var message in Messages)
				{
					<div class="mb-3">
						@if (message.IsUser)
						{
							<div class="text-end">
								<span class="badge bg-primary">You</span>
								<div class="alert alert-primary d-inline-block text-start">
									@message.Text
								</div>
							</div>
						}
						else
						{
							<div class="text-start">
								<span class="badge bg-secondary">Assistant</span>
								<div class="alert alert-secondary d-inline-block text-start">
									@message.Text
								</div>
							</div>
						}
					</div>
				}
			</div>
		</div>
	</div>

	<!-- Input Area -->
	<EditForm class="row py-3" Model="@Message" OnSubmit="SendMessage">
		<div class="col-md-8 mx-auto">
			<div class="input-group">
				<InputText class="form-control" placeholder="Type your message..." @bind-Value="Message" />
				<button type="submit" class="btn btn-primary">
					<i class="fa-solid fa-paper-plane bb-theme-mode-active"></i>
					Send
				</button>
				<button class="btn btn-secondary" @onclick="RecordVoice">
					<i class="fa-solid fa-microphone bb-theme-mode-active"></i>
				</button>
			</div>
		</div>
	</EditForm>
</div>

@code {
	private string Message { get; set; } = string.Empty;
	private List<ChatMessage> Messages { get; set; } = new();
	private HttpClient httpClient;

	protected override void OnInitialized()
	{
		httpClient = HttpClientFactory.CreateClient("AI-Agent-Client");
	}

	private async Task SendMessage()
	{
		if (!string.IsNullOrWhiteSpace(Message))
		{
			string prompt = Message;
			Messages.Add(new ChatMessage { Text = Message });
			Message = string.Empty;

			var assistantResponse = new ChatMessage { Text = string.Empty, IsUser = false };
			Messages.Add(assistantResponse);

			// await RenderMessageFromHttp(prompt, assistantResponse);
			await foreach (var token in httpClient.GetFromJsonAsAsyncEnumerable<string>($"/chat?prompt={prompt}"))
			{
				assistantResponse.Text += token;
				StateHasChanged();
				await Task.Delay(200);
			}
		}
	}

	private async Task RenderMessageFromHttp(string prompt, ChatMessage message)
	{
		await foreach (var token in httpClient.GetFromJsonAsAsyncEnumerable<string>($"/chat?prompt={prompt}"))
		{
			message.Text += token;
			await Task.Delay(200);
		}
	}

	private void RecordVoice()
	{
		// Logic to handle voice recording
	}

	private class ChatMessage
	{
		public string Text { get; set; } = default!;
		public bool IsUser { get; set; } = true;
	}

}
